#include <iostream>
#include <initializer_list>
#include <stack>

//Iterative BST
template <typename T>
class BST {
	class Node {
	public:
		T data;
		Node* left = NULL, * right = NULL;
		Node(T Data):data(Data){}
	};
	
public:
	Node* root = NULL;
	//Default constructor
	BST() = default;

	//List initialiser constructor
	BST(std::initializer_list<T> list) {
		for (T item : list)
			Add(item);
	}


	//Inserts element in the BST 
	void Add(T data) {
		
		//If we are inserting first element
		if (root == NULL){
			root = new Node(data);
			return;
		}

		Node* temp = root;
		Node* beforTemp = NULL;
		while (temp != NULL) {
			beforTemp = temp;
			//If element is already inserted
			if (temp->data == data) {
				std::cout << "Element is in BST already" << std::endl;
				return;
			}
			else if (temp->data > data)
				temp = temp->left;
			else if (temp->data < data)
				temp = temp->right;
		}
		//Assigning node to appropriate adress
		if(beforTemp->data > data)
			beforTemp->left = new Node(data);
		else if(beforTemp->data < data)
			beforTemp->right = new Node(data);
	}

	//Diplays elements of a list (Inorder)
	void Display() {

		Node* temp = root;
		std::stack<Node*> s1;

		for (;;) {
			//Going left if there is any child
			if (temp != NULL) {
				s1.push(temp);
				temp = temp->left;
			}
			else {
				//Breakig loop if stack is empty
				if (s1.empty())break;
				temp = s1.top();
				std::cout << s1.top()->data << std::endl;
				temp = temp->right;
				s1.pop();
			}

		}

	}

	//Seachs element in BST
	bool Search(T data) {
		Node* temp = root;

		while (temp != NULL) {
			if (temp->data == data)
				return true;
			if (temp->data < data)
				temp = temp->right;
			else if (temp->data > data)
				temp = temp->left;
		}
		std::cout << "Out" << std::endl;
		return false;
	}
	
	//Deletes given element from BST
	void Delete(T data) {

		//Searching for targer
		Node* beforeTemp = NULL;
		Node* Target = root;
		//If BST is empty
		if (Target == NULL) {
			std::cout << "BST is empty! nothing to delete" << std::endl;
			return;
		}
		
		while (Target->data != data) {
			beforeTemp = Target;
			if (Target->data < data)
				Target = Target->right;
			else
				Target = Target->left;

			if (Target == NULL){
				std::cout << "Such element does not exist in the BST" << std::endl;
				return;
			}
		}
		
		//If we are deleteing leaf node
		if (Target->left == NULL && Target->right == NULL) {
			Case1(beforeTemp, Target);
			return;
		}
		


		//If we are deleting node with one child
		if ((Target->left == NULL && Target->right != NULL) || (Target->left != NULL && Target->right == NULL)) {
			Case2(beforeTemp, Target);
			return;
		}
		//If we are deleting node with two child
		if (Target->left != NULL && Target->right != NULL) {
			Case3(Target);
		}
	
	}


private:
	void Case1(Node*& beforeLeaf,Node*& Target) {

		if (beforeLeaf->left == Target){
			delete beforeLeaf->left;
			beforeLeaf->left = NULL;
		}
		else if (beforeLeaf->right == Target){
			delete beforeLeaf->right;
			beforeLeaf->right = NULL;
		}

	}

	void Case2(Node*& beforeNode,Node*& Target) {

		//Determining if deleted node has left or right child
		Node* tempChild = Target->left;
		if (Target->left == NULL)tempChild = Target->right;


		//Determining weither the Temp node is right or left for the before node
		if (beforeNode->left == Target) {
			beforeNode->left = tempChild;
			delete Target;
		}
		else if (beforeNode->right == Target) {
			beforeNode->right = tempChild;
			delete Target;
		}


	}

	void Case3(Node*& Target) {
		//Find rightmost element from left subtree
		Node* RightMost = Target->left;
		Node* BeforRightMost = Target;
		while (RightMost->right != NULL) {
			BeforRightMost = RightMost;
			RightMost = RightMost->right;
		}
		//Assigne vlaue of righmost elemnet to target
		Target->data = RightMost->data;

		//If righmost element is Case1(Leaf)
		if (RightMost->left == NULL && RightMost->right == NULL) {
			Case1(BeforRightMost, RightMost);
			return;
		}
		//If righmost node is Case2(Branch with one child)
		if (!(RightMost->left == NULL && RightMost->right == NULL)) {
			Case2(BeforRightMost, RightMost);
			return;
		}
			
	}

};
