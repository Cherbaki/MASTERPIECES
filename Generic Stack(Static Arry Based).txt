#include <iostream>
#include <initializer_list>

//Based on static array
const int capacity = 10;
template <typename T>
class Stack {
	
	T container[capacity];	
	int size = 0;

public:

	Stack() = default;

	Stack(const Stack& S2) {

		for (int i = 0; i < S2.size; i++) {
			Add(S2.container[i]);
		}
	}

	Stack(std::initializer_list<T> list) {
		for (auto item : list)
			Add(item);
	}

	void Display() {
		if (!isEmpty()) {

			for (int i = size; i > 0; i--)
				std::cout << container[i - 1] << "\t";
		}
		else {
			std::cout << "Stack is empty" << std::endl;
		}
			
	}

	void Add(T Data) {

		if (!isFull()) {
			container[size] = Data;
			size++;
		}
		else {
			std::cout << "Stack is full" << std::endl;
		}
		
	}

	void Delete() {
		if(!isEmpty()){
			size--;
		}
		else {
			std::cout << "Stack is already empty" << std::endl;
		}
	}
	
	bool isEmpty() { return size == 0; }
	
	bool isFull() { return size == capacity; }

	Stack& operator =(const Stack& S2) {
		this->size = 0;
		for (int i = 0; i < S2.size; i++) {
			Add(S2.container[i]);
		}
		return *this;
	}

};
