#include <stdio.h>
#include <time.h>
#include <stdint.h>
#include <string.h>



//Creating 2 dimensional character array for 3X3 board
char GameBoard[3][3];

//Crating characters for player and NPC
char PLAYER,PLAYER2;
char NPC;

//LFSR random number generator
unsigned long lfsr32 ( unsigned long seed ){
    //If seed is 0 return 32bit value in sequence
    if(seed == 0){
        return seed>>1;
    }
    int i;
    for(i = 0; i < 32;i++){
        //Generating output bit with given taps 32,30 26 and 25
        uint32_t out = (seed>>0 ^ seed>>2 ^ seed>>6 ^ seed>>7) & 1;
        //shifting state 1 unite right and putting generated bit as the left last bit
        seed = seed>>1 | out<<31;
    }
    return seed;
}

//Restarts board of the game which happens to be 2d Character array
void RestartGameBoard(){
    int r;
    int c;
    for(r = 0; r < 3; r++)
    {
        for(c = 0; c < 3; c++)
        {
            GameBoard[r][c] = ' ';
        }
    }
}

//Prints board in the console
void PrintGameBoard(){

    printf("\n");

    printf(" %c | %c | %c ",GameBoard[0][0],GameBoard[0][1],GameBoard[0][2]);

    printf("\n---|---|---\n");

    printf(" %c | %c | %c ",GameBoard[1][0],GameBoard[1][1],GameBoard[1][2]);

    printf("\n---|---|---\n");

    printf(" %c | %c | %c \n",GameBoard[2][0],GameBoard[2][1],GameBoard[2][2]);

}

//Checks if there is any free space on the board and returns the amount
int FreeSpaceChecker(){

    int FreeSpaces = 0;
    int r,c;
    for(r = 0; r < 3; r++)
        {
        for(c = 0; c < 3; c++)
        {
            if(GameBoard[r][c] == ' ')
                FreeSpaces++;
        }
    }
    return FreeSpaces;
}

//This function will be executed when it'll be players turn to move
void PlayersTurn(){

    int r,c;
    printf("Pass row number(From 1 to 3): ");
    scanf("%d",&r);
    //Decrementing given rows index to match it 0 based array
    r--;

    printf("Pass column number(Form 1 to 3): ");
    scanf("%d",&c);
    //Decrementing given columns index to math it 0 based array
    c--;

    //checking if given coordinates is already occupied
    if(GameBoard[r][c] !=  ' '){
        printf("Given place is already occupied, try another EMPTY one\n");
        PlayersTurn();
        return;
    }

    //If given coordinates aren't occupied
    GameBoard[r][c] = PLAYER;

}

//Allows two player two play against each other
void TwoPlayerMove(char Char){

        int r,c;
        if(Char == PLAYER)
            printf("It's Player1s move:\n");
        else
            printf("It's Player2s move:\n");

        printf("Pass row number(From 1 to 3): ");
        scanf("%d",&r);
        //Decrementing given rows index to match it 0 based array
        r--;

        printf("Pass column number(Form 1 to 3): ");
        scanf("%d",&c);
        //Decrementing given columns index to math it 0 based array
        c--;

        //checking if given coordinates is already occupied
        if(GameBoard[r][c] !=  ' '){
            printf("Given place is already occupied, try another EMPTY one\n");
            PlayersTurn();
            return;
        }

        //If given coordinates aren't occupied
        GameBoard[r][c] = Char;
}

//This function will be executed when it'll be NPCs turn to move
void NpcsTurnEasy(){

    //trying to generate NPCs move using random number
    int r,c;

    static unsigned long seed1 = 0x5AA5FF00;
    static unsigned long seed2 = 0x5AA5F600;

    if(FreeSpaceChecker() < 9){
        do{

            seed1 = lfsr32(seed1);
            seed2 = lfsr32(seed2);
            r = seed1 % 3;
            c = seed2 % 3;

        //Looping until generating perfect coordinate
        }while(GameBoard[r][c] != ' ');
    }

    GameBoard[r][c] = NPC;

}

//This function will be executed when it'll be NPCs turn to move
void NpcsTurnPro(){

    //Checking all rows
    int r,c;
    for(r = 0; r < 3; r++){
        int NumberOfPlayersCharacters = 0;
        int NumberOfNpcsCharacters = 0;
        int NumberOfEmptySpaces = 0;
        //Reading each row
        for(c = 0; c < 3; c++){
            //Counting number of player characters in row
            if(GameBoard[r][c] == PLAYER)
                NumberOfPlayersCharacters++;
            //Counting number of NPC characters in row
            else if(GameBoard[r][c] == NPC)
                NumberOfNpcsCharacters++;
            else
                NumberOfEmptySpaces++;
        }

        //Firstly checking if NPC should win
        if(NumberOfNpcsCharacters == 2 && NumberOfEmptySpaces == 1){
            int i;
            //finding empty spaces index
            for(i = 0; i < 3;i++){
                if(GameBoard[r][i] == ' ')
                   break;
            }
            GameBoard[r][i] = NPC;
            return;
        }
        //Checking if NPC should block
        if(NumberOfPlayersCharacters == 2 && NumberOfEmptySpaces == 1){
            int i;
            //finding empty spaces index
            for(i = 0; i < 3;i++){
                if(GameBoard[r][i] == ' ')
                   break;
            }
            GameBoard[r][i] = NPC;
            return;
        }


    }

    //Checking all rows columns
    for(c = 0; c < 3; c++){
        int NumberOfPlayersCharacters = 0;
        int NumberOfNpcsCharacters = 0;
        int NumberOfEmptySpaces = 0;
        //Reading each row
        for(r = 0; r < 3; r++){
            //Counting number of player characters in row
            if(GameBoard[r][c] == PLAYER)
                NumberOfPlayersCharacters++;
            //Counting number of NPC characters in row
            else if(GameBoard[r][c] == NPC)
                NumberOfNpcsCharacters++;
            else
                NumberOfEmptySpaces++;
        }

        //Firstly checking if NPC should win
        if(NumberOfNpcsCharacters == 2 && NumberOfEmptySpaces == 1){
            int i;
            //finding empty spaces index
            for(i = 0; i < 3;i++){
                if(GameBoard[i][c] == ' ')
                   break;
            }
            GameBoard[i][c] = NPC;
            return;
        }
        //Checking if NPC should block
        if(NumberOfPlayersCharacters == 2 && NumberOfEmptySpaces == 1){
            int i;
            //finding empty spaces index
            for(i = 0; i < 3;i++){
                if(GameBoard[i][c] == ' ')
                   break;
            }
            GameBoard[i][c] = NPC;
            return;
        }


    }

    //Checking left right diagonal

        int NumberOfPlayersCharacters = 0;
        int NumberOfNpcsCharacters = 0;
        int NumberOfEmptySpaces = 0;

        //Counting each diagonal
        c = 0;
        for(r = 0;r < 3;r++){

            //Counting number of player characters in row
            if(GameBoard[r][c] == PLAYER)
                NumberOfPlayersCharacters++;
            //Counting number of NPC characters in row
            else if(GameBoard[r][c] == NPC)
                NumberOfNpcsCharacters++;
            else
                NumberOfEmptySpaces++;
            c++;
        }

        //Firstly checking if NPC should win
        if(NumberOfNpcsCharacters == 2 && NumberOfEmptySpaces == 1){
            int k,l = 0;
            //finding empty spaces index
            for(k = 0; k < 3;k++){
                l++;
                if(GameBoard[k][l] == ' ')
                   break;
            }
            GameBoard[k][l] = NPC;
            return;
        }

        //Checking if NPC should block
        if(NumberOfPlayersCharacters == 2 && NumberOfEmptySpaces == 1){
            int k,l = 0;
            //finding empty spaces index
            for(k = 0; k < 3;k++){
                if(GameBoard[k][l] == ' ')
                   break;
                l++;
            }
            GameBoard[k][l] = NPC;
            return;
        }




    //Checking right left diagonal

        NumberOfPlayersCharacters = 0;
        NumberOfNpcsCharacters = 0;
        NumberOfEmptySpaces = 0;

        //Counting each diagonal
        c = 2;
        for(r = 2;r > 0;r--){

            //Counting number of player characters in row
            if(GameBoard[r][c] == PLAYER)
                NumberOfPlayersCharacters++;
            //Counting number of NPC characters in row
            else if(GameBoard[r][c] == NPC)
                NumberOfNpcsCharacters++;
            else
                NumberOfEmptySpaces++;

            c--;
        }

        //Firstly checking if NPC should win
        if(NumberOfNpcsCharacters == 2 && NumberOfEmptySpaces == 1){
            int k,l = 2;
            //finding empty spaces index
            for(k = 2; k > 0;k--){

                if(GameBoard[k][l] == ' ')
                   break;

                l--;
            }
            GameBoard[k][l] = NPC;
            return;
        }

        //Checking if NPC should block
        if(NumberOfPlayersCharacters == 2 && NumberOfEmptySpaces == 1){
            int k,l = 2;
            //finding empty spaces index
            for(k = 2; k > 0;k--){

                if(GameBoard[k][l] == ' ')
                   break;

                l--;
            }
            GameBoard[k][l] = NPC;
            return;
        }



    NpcsTurnEasy();
}

//Checks who is the winner
char CheckWinner(){
    int i;
    //Checking rows For winner
    for(i = 0; i < 3;i++)
        {
        if(GameBoard[i][0] == GameBoard[i][1] && GameBoard[i][0] == GameBoard[i][2])
        {
                return GameBoard[i][0];
        }
    }
    //Checking columns
    for(i = 0; i < 3; i++)
    {
        if(GameBoard[0][i] == GameBoard[1][i] && GameBoard[0][i] == GameBoard[2][i])
        {
                return GameBoard[0][i];
        }
    }
    //Checking Diagonals
    if(GameBoard[0][0] == GameBoard[1][1] && GameBoard[0][0] == GameBoard[2][2])
    {
        return GameBoard[0][0];
    }
    if(GameBoard[0][2] == GameBoard[1][1] && GameBoard[0][2] == GameBoard[2][0])
    {
        return GameBoard[0][0];
    }



    return ' ';
}

//prints the winner
void PrintWinner(char winner){

    printf("\n-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n");
    if(winner == PLAYER)
    {
        printf("\nPlayer has won!!!\n");
    }
    else if(winner == NPC)
    {
        printf("\nNPC has won!!!\n");
    }
    else
    {
        printf("\nIt's a TIE!!!\n");
    }

    printf("\n-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n");
}

//prints the winner
void PrintWinnerForTwoPlayer(char winner){

    printf("\n-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n");
    if(winner == PLAYER){
        printf("\nPlayer1 has won!!!\n");
    }
    else {
        printf("\nPlayer2 has won!!!\n");
    }

    printf("\n-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n");
}

//Checks if player want to play again
int PlayersResponse(){
     char PlayersWhish;
     printf("\n\nDo you want to player again(Pass 1 for yes and anything else for no): ");

     scanf(" %c",&PlayersWhish);

    if(PlayersWhish == '1')
        return 1;
    return 0;
}

//Asks player to choose character
void ChooseCharaceter(){
    char chose;

    printf("Pass 1 if you want to be 'X' and anything else for  'O' :\n");

    scanf(" %c",&chose);

    if(chose == '1')
    {
        PLAYER = 'X';
        NPC = 'O';
        PLAYER2 = 'O';
    }else
    {
        NPC = 'X';
        PLAYER2 = 'X';
        PLAYER = 'O';
    }

    printf("\n\nCharacter %c has chosen for the player\n\n",chose);
}

void EasyMode(){

    FILE* GameRecordsFile = fopen("GameRecords.txt","w");

    if(GameRecordsFile == NULL){
        printf("Unable to open the file\n");
        return;
    }

    int Response = -1;

    //Asking user to choose character ( either 'X' or 'O')
    ChooseCharaceter();

    char winner =  ' ';
    int MatchCounter = 1;
    do{
        //Asking player to choose character
        system("cls");

        printf("\n\n\n");
        //Currently it'll be empty space, but then it will be replaced either with 'X' or 'Y'
        winner =  ' ';

        //At first we'll restart the board
        RestartGameBoard();


        do{

            //After reseting we can print game boards
            system("cls");
            PrintGameBoard();

            //Asking player to make move
            PlayersTurn();
            //Now let's check if winner is already known
            winner = CheckWinner();
            if(winner != ' ' || FreeSpaceChecker() == 0)
                break;

            //Asking NPC to make move
            NpcsTurnEasy();
            //Now let's check if winner is already known
            winner = CheckWinner();
            if(winner != ' ' || FreeSpaceChecker() == 0)
                break;


        }while(winner == ' ' && FreeSpaceChecker() > 0);

        //Printing final game board to make winner visible graphically
        system("cls");
        PrintGameBoard();
        //Printing the winner
        PrintWinner(winner);

        //Printing winner in file
        if(winner != ' ')
            fprintf(GameRecordsFile,"Winner of the %d_th match: %c\n",MatchCounter,winner);
        else
            fprintf(GameRecordsFile,"Game #%d end with result 'Tie'\n",MatchCounter);
        Response = PlayersResponse();


        MatchCounter++;

    }while(Response == 1);



    fclose(GameRecordsFile);
    system("cls");
    GameRecordsFile = fopen("GameRecords.txt","r");
    printf("Game records: \n_______________\n");
    char text[100];
    while(fgets(text,100,GameRecordsFile)){
        printf("%s",text);
    }


    fclose(GameRecordsFile);

    system("pause > 0");

}

void HardMode(){

    FILE* GameRecordsFile = fopen("GameRecords.txt","w");

    if(GameRecordsFile == NULL){
        printf("Unable to open the file\n");
        return;
    }

    int Response = -1;

    //Asking user to choose character ( either 'X' or 'O')
    ChooseCharaceter();

    char winner =  ' ';
    int MatchCounter = 1;
    do{
        //Asking player to choose character
        system("cls");

        printf("\n\n\n");
        //Currently it'll be empty space, but then it will be replaced either with 'X' or 'Y'
        winner =  ' ';

        //At first we'll restart the board
        RestartGameBoard();


        do{

            //After reseting we can print game boards
            system("cls");
            PrintGameBoard();

            //Asking player to make move
            PlayersTurn();
            //Now let's check if winner is already known
            winner = CheckWinner();
            if(winner != ' ' || FreeSpaceChecker() == 0)
                break;

            //Asking NPC to make move
            NpcsTurnPro();
            //Now let's check if winner is already known
            winner = CheckWinner();
            if(winner != ' ' || FreeSpaceChecker() == 0)
                break;


        }while(winner == ' ' && FreeSpaceChecker() > 0);

        //Printing final game board to make winner visible graphically
        system("cls");
        PrintGameBoard();
        //Printing the winner
        PrintWinner(winner);

        //Printing winner in file
        if(winner != ' ')
            fprintf(GameRecordsFile,"Winner of the %d_th match: %c\n",MatchCounter,winner);
        else
            fprintf(GameRecordsFile,"Game #%d end with result 'Tie'\n",MatchCounter);

        Response = PlayersResponse();

        MatchCounter++;

    }while(Response == 1);



    fclose(GameRecordsFile);
    system("cls");
    GameRecordsFile = fopen("GameRecords.txt","r");
    printf("Game records: \n_______________\n");
    char text[100];
    while(fgets(text,100,GameRecordsFile)){
        printf("%s",text);
    }


    fclose(GameRecordsFile);

    system("pause > 0");
}

void TwoPlayer(){

    FILE* GameRecordsFile = fopen("GameRecords.txt","w");

    if(GameRecordsFile == NULL){
        printf("Unable to open the file\n");
        return;
    }

    int Response = -1;

    //Asking user to choose character ( either 'X' or 'O')
    ChooseCharaceter();

    char winner =  ' ';
    int MatchCounter = 1;
    do{
        //Asking player to choose character
        system("cls");

        printf("\n\n\n");
        //Currently it'll be empty space, but then it will be replaced either with 'X' or 'Y'
        winner =  ' ';

        //At first we'll restart the board
        RestartGameBoard();


        do{

            //After reseting we can print game boards
            system("cls");
            PrintGameBoard();

            //Asking player1 to make move
            TwoPlayerMove(PLAYER);
            //Now let's check if winner is already known
            winner = CheckWinner();
            if(winner != ' ' || FreeSpaceChecker() == 0)
                break;

            //Cleaning screen after first players move
            system("cls");
            PrintGameBoard();
            //Asking player2 to make move
            TwoPlayerMove(PLAYER2);
            //Now let's check if winner is already known
            winner = CheckWinner();
            if(winner != ' ' || FreeSpaceChecker() == 0)
                break;


        }while(winner == ' ' && FreeSpaceChecker() > 0);

        //Printing final game board to make winner visible graphically
        system("cls");
        PrintGameBoard();
        //Printing the winner
        PrintWinnerForTwoPlayer(winner);


        //Printing winner in file
        if(winner != ' ')
            fprintf(GameRecordsFile,"Winner of the %d_th match: %c\n",MatchCounter,winner);
        else
            fprintf(GameRecordsFile,"Game #%d end with result 'Tie'\n",MatchCounter);
        Response = PlayersResponse();


        MatchCounter++;

    }while(Response == 1);



    fclose(GameRecordsFile);
    system("cls");
    GameRecordsFile = fopen("GameRecords.txt","r");
    printf("Game records: \n_______________\n");
    char text[100];
    while(fgets(text,100,GameRecordsFile)){
        printf("%s",text);
    }


    fclose(GameRecordsFile);

    system("pause > 0");

}

//Menu which allows player to choose between multiple difficulties
void MainMenu(){

    int choice;
    do{
      system("cls");
      printf("-----------------------------\n");
      printf("|Choose difficulty of game: |\n");
      printf("-----------------------------\n");
      printf("|1.Easy                     |\n");
      printf("-----------------------------\n");
      printf("|2.Hard                     |\n");
      printf("-----------------------------\n");
      printf("|3.Two Player               |\n");
      printf("-----------------------------\n");
      printf("|4.Quit Game                |\n");
      printf("-----------------------------\n");
      scanf(" %d",&choice);
      if(choice == 1){
        system("cls");
        EasyMode();
      }else if(choice == 2){
        system("cls");
        HardMode();
      }else if(choice == 3){
        system("cls");
        TwoPlayer();
      }

    }while(choice != 4);
}

int main()
{
    MainMenu();



    return 0;
}
